AWSTemplateFormatVersion: 2010-09-09

Parameters:

  ApiKeyValue:
    Type: String
    Default: bf572286a9ea25a28b9c896b03b7176e
    NoEcho: true
  ProxyPath:
    Type: String
    Default: proxy
  DeploymentName:
    Type: String
    Default: v1
  ApplicationName:
    Type: String
    Default: candela
  BuildId:
    Type: String
    Default: "#{codepipeline.PipelineExecutionId}"
  Branch:
    Type: String
    Default: candela

  Repo:
    Type: String
    Default: bloom-apps

  GitHubUser:
    Type: String
    Default: cldcvr-github-automation-bloomgit

  OAuthToken:
    Type: String
    Default: 6d0ab4ddb2da7b1f90963da53b386072ec2d0ee2
    NoEcho: true

  Owner:
    Type: String
    Default: cldcvr

  PostgresEndpointDeploymentUrl:
    Type: String
    Default: candela/k8s/postgres-ep.yml

  PostgresServiceDeploymentUrl:
    Type: String
    Default: candela/k8s/postgres-svc.yml

  VpcBlock:
    Type: String
    Default: 192.168.0.0/16
    Description: The CIDR range for the VPC. This should be a valid private (RFC 1918) CIDR range.

  PublicSubnet01Block:
    Type: String
    Default: 192.168.0.0/18
    Description: CidrBlock for public subnet 01 within the VPC

  PublicSubnet02Block:
    Type: String
    Default: 192.168.64.0/18
    Description: CidrBlock for public subnet 02 within the VPC

  PrivateSubnet01Block:
    Type: String
    Default: 192.168.128.0/18
    Description: CidrBlock for private subnet 01 within the VPC

  PrivateSubnet02Block:
    Type: String
    Default: 192.168.192.0/18
    Description: CidrBlock for private subnet 02 within the VPC

  NodeInstanceType:
    Description: EC2 instance type for the node instances
    Type: String
    Default: t2.medium
    AllowedValues:
      - t2.small
      - t2.medium
      - t2.large
      - t2.xlarge
      - t2.2xlarge
      - m3.medium
      - m3.large
      - m3.xlarge
      - m3.2xlarge
      - m4.large
      - m4.xlarge
      - m4.2xlarge
      - m4.4xlarge
      - m4.10xlarge
      - m5.large
      - m5.xlarge
      - m5.2xlarge
      - m5.4xlarge
      - m5.12xlarge
      - m5.24xlarge
      - c4.large
      - c4.xlarge
      - c4.2xlarge
      - c4.4xlarge
      - c4.8xlarge
      - c5.large
      - c5.xlarge
      - c5.2xlarge
      - c5.4xlarge
      - c5.9xlarge
      - c5.18xlarge
      - i3.large
      - i3.xlarge
      - i3.2xlarge
      - i3.4xlarge
      - i3.8xlarge
      - i3.16xlarge
      - r3.xlarge
      - r3.2xlarge
      - r3.4xlarge
      - r3.8xlarge
      - r4.large
      - r4.xlarge
      - r4.2xlarge
      - r4.4xlarge
      - r4.8xlarge
      - r4.16xlarge
      - x1.16xlarge
      - x1.32xlarge
      - p2.xlarge
      - p2.8xlarge
      - p2.16xlarge
      - p3.2xlarge
      - p3.8xlarge
      - p3.16xlarge
    ConstraintDescription: must be a valid EC2 instance type

  NodeAutoScalingGroupMinSize:
    Type: Number
    Description: Minimum size of Node Group ASG.
    Default: 1

  NodeAutoScalingGroupMaxSize:
    Type: Number
    Description: Maximum size of Node Group ASG.
    Default: 3

  NodeGroupName:
    Description: Unique identifier for the Node Group.
    Type: String
    Default: 'candela-node-group'

Mappings:
  RegionMap:
    ap-southeast-1:
      EKSAMIID: ami-0365ad3c8cfd3cb4c
      AMZNLNX2AMIID: ami-0cd31be676780afa7
Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      -
        Label:
          default: !Join ["-", [ !Ref ApplicationName, "worker-network-config" ] ]
        Parameters:
          - VpcBlock
          - PublicSubnet01Block
          - PublicSubnet02Block
          - PrivateSubnet01Block
          - PrivateSubnet02Block

Resources:
  ##################################################    VPC Stack   ######################################################

  EKSRole:
    Type: 'AWS::IAM::Role'
    Properties:
      RoleName: !Join ["-", [ !Ref ApplicationName, "eks-role" ] ]
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - eks.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: /
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonEKSClusterPolicy
        - arn:aws:iam::aws:policy/AmazonEKSServicePolicy

  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock:  !Ref VpcBlock
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: !Join ["-", [ !Ref ApplicationName, "eks-vpc" ] ]

  InternetGateway:
    Type: "AWS::EC2::InternetGateway"

  VPCGatewayAttachment:
    Type: "AWS::EC2::VPCGatewayAttachment"
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref VPC

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Join ["-", [ !Ref ApplicationName, "pub-rtb" ] ]
        - Key: Network
          Value: Public

  PrivateRouteTable01:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Join ["-", [ !Ref ApplicationName, "priv-rtb-az1" ] ]
        - Key: Network
          Value: Private01

  PrivateRouteTable02:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Join ["-", [ !Ref ApplicationName, "priv-rtb-az2" ] ]
        - Key: Network
          Value: Private02

  PublicRoute:
    DependsOn: VPCGatewayAttachment
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PrivateRoute01:
    DependsOn:
      - VPCGatewayAttachment
      - NatGateway01
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable01
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway01

  PrivateRoute02:
    DependsOn:
      - VPCGatewayAttachment
      - NatGateway02
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable02
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway02

  NatGateway01:
    DependsOn:
      - NatGatewayEIP1
      - PublicSubnet01
      - VPCGatewayAttachment
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt 'NatGatewayEIP1.AllocationId'
      SubnetId: !Ref PublicSubnet01
      Tags:
        - Key: Name
          Value: !Join ["-", [ !Ref ApplicationName, "nat-gateway-az1" ] ]

  NatGateway02:
    DependsOn:
      - NatGatewayEIP2
      - PublicSubnet02
      - VPCGatewayAttachment
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt 'NatGatewayEIP2.AllocationId'
      SubnetId: !Ref PublicSubnet02
      Tags:
        - Key: Name
          Value: !Join ["-", [ !Ref ApplicationName, "nat-gateway-az2" ] ]

  NatGatewayEIP1:
    DependsOn:
      - VPCGatewayAttachment
    Type: 'AWS::EC2::EIP'
    Properties:
      Domain: vpc

  NatGatewayEIP2:
    DependsOn:
      - VPCGatewayAttachment
    Type: 'AWS::EC2::EIP'
    Properties:
      Domain: vpc

  PublicSubnet01:
    Type: AWS::EC2::Subnet
    Metadata:
      Comment: Public Subnet 01
    Properties:
      MapPublicIpOnLaunch: true
      AvailabilityZone:
        Fn::Select:
          - '0'
          - Fn::GetAZs:
              Ref: AWS::Region
      CidrBlock:
        Ref: PublicSubnet01Block
      VpcId:
        Ref: VPC
      Tags:
        - Key: Name
          Value: !Join ["-", [ !Ref ApplicationName, "pub-sub-az1" ] ]
        - Key: kubernetes.io/role/elb
          Value: 1

  PublicSubnet02:
    Type: AWS::EC2::Subnet
    Metadata:
      Comment: Public Subnet 02
    Properties:
      MapPublicIpOnLaunch: true
      AvailabilityZone:
        Fn::Select:
          - '1'
          - Fn::GetAZs:
              Ref: AWS::Region
      CidrBlock:
        Ref: PublicSubnet02Block
      VpcId:
        Ref: VPC
      Tags:
        - Key: Name
          Value: !Join ["-", [ !Ref ApplicationName, "pub-sub-az2" ] ]
        - Key: kubernetes.io/role/elb
          Value: 1

  PrivateSubnet01:
    Type: AWS::EC2::Subnet
    Metadata:
      Comment: Private Subnet 01
    Properties:
      AvailabilityZone:
        Fn::Select:
          - '0'
          - Fn::GetAZs:
              Ref: AWS::Region
      CidrBlock:
        Ref: PrivateSubnet01Block
      VpcId:
        Ref: VPC
      Tags:
        - Key: Name
          Value: !Join ["-", [ !Ref ApplicationName, "priv-sub-az1" ] ]
        - Key: kubernetes.io/role/internal-elb
          Value: 1

  PrivateSubnet02:
    Type: AWS::EC2::Subnet
    Metadata:
      Comment: Private Subnet 02
    Properties:
      AvailabilityZone:
        Fn::Select:
          - '1'
          - Fn::GetAZs:
              Ref: AWS::Region
      CidrBlock:
        Ref: PrivateSubnet02Block
      VpcId:
        Ref: VPC
      Tags:
        - Key: Name
          Value: !Join ["-", [ !Ref ApplicationName, "priv-sub-az2" ] ]
        - Key: kubernetes.io/role/internal-elb
          Value: 1

  PublicSubnet01RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet01
      RouteTableId: !Ref PublicRouteTable

  PublicSubnet02RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet02
      RouteTableId: !Ref PublicRouteTable

  PrivateSubnet01RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet01
      RouteTableId: !Ref PrivateRouteTable01

  PrivateSubnet02RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet02
      RouteTableId: !Ref PrivateRouteTable02

  ControlPlaneSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Join ["-", [ !Ref ApplicationName, "sg" ] ]
      GroupDescription: Cluster communication with worker nodes
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: "-1"
          FromPort: '1'
          ToPort: '65535'
          CidrIp:
            Ref: VpcBlock

  ##################################################    RDS   #########################################################

  DBSubnetGroup:
    DependsOn:
      - VPC
      - InternetGateway
      - VPCGatewayAttachment
      - PublicRouteTable
      - PrivateRouteTable01
      - PrivateRouteTable02
      - PublicRoute
      - PrivateRoute01
      - PrivateRoute02
      - NatGateway01
      - NatGateway02
      - NatGatewayEIP1
      - NatGatewayEIP2
      - PublicSubnet01
      - PublicSubnet02
      - PrivateSubnet01
      - PrivateSubnet02
      - PublicSubnet01RouteTableAssociation
      - PublicSubnet02RouteTableAssociation
      - PrivateSubnet01RouteTableAssociation
      - PrivateSubnet02RouteTableAssociation
      - ControlPlaneSecurityGroup
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: !Join ["-", [ !Ref ApplicationName, "priv-sub-group" ] ]
      SubnetIds:
        - !Ref PrivateSubnet01
        - !Ref PrivateSubnet02
  DBInstance:
    DependsOn:
      - VPC
      - InternetGateway
      - VPCGatewayAttachment
      - PublicRouteTable
      - PrivateRouteTable01
      - PrivateRouteTable02
      - PublicRoute
      - PrivateRoute01
      - PrivateRoute02
      - NatGateway01
      - NatGateway02
      - NatGatewayEIP1
      - NatGatewayEIP2
      - PublicSubnet01
      - PublicSubnet02
      - PrivateSubnet01
      - PrivateSubnet02
      - PublicSubnet01RouteTableAssociation
      - PublicSubnet02RouteTableAssociation
      - PrivateSubnet01RouteTableAssociation
      - PrivateSubnet02RouteTableAssociation
      - ControlPlaneSecurityGroup
    Type: AWS::RDS::DBInstance
    DeletionPolicy: Delete
    Properties:
      DBName: !Ref ApplicationName
      DBInstanceIdentifier: !Ref ApplicationName
      PubliclyAccessible: true
      Engine: postgres
      AllocatedStorage: "5"
      DBSubnetGroupName: !Ref DBSubnetGroup
      MasterUsername: "postgres"
      DBInstanceClass: "db.m3.medium"
      DBSecurityGroups:
        - !Ref DBSecurityGroup
      MasterUserPassword: "password"
  DBSecurityGroup:
    DependsOn:
      - VPC
      - InternetGateway
      - VPCGatewayAttachment
      - PublicRouteTable
      - PrivateRouteTable01
      - PrivateRouteTable02
      - PublicRoute
      - PrivateRoute01
      - PrivateRoute02
      - NatGateway01
      - NatGateway02
      - NatGatewayEIP1
      - NatGatewayEIP2
      - PublicSubnet01
      - PublicSubnet02
      - PrivateSubnet01
      - PrivateSubnet02
      - PublicSubnet01RouteTableAssociation
      - PublicSubnet02RouteTableAssociation
      - PrivateSubnet01RouteTableAssociation
      - PrivateSubnet02RouteTableAssociation
      - ControlPlaneSecurityGroup
    Type: AWS::RDS::DBSecurityGroup
    Properties:
      GroupDescription: !Join ["-", [ !Ref ApplicationName, "sg-ingress-for-eks" ] ]
      EC2VpcId: !Ref VPC
      DBSecurityGroupIngress:
        - EC2SecurityGroupId: !GetAtt  "ControlPlaneSecurityGroup.GroupId"

  Cluster:
    DependsOn:
      - DBInstance
    Type: "AWS::EKS::Cluster"
    Properties:
      Version: "1.17"
      Name: !Join ["-", [ !Ref ApplicationName, "eks-cluster" ] ]
      RoleArn: !GetAtt EKSRole.Arn
      ResourcesVpcConfig:
        SecurityGroupIds:
          - !GetAtt ControlPlaneSecurityGroup.GroupId
        SubnetIds:
          - !Ref PrivateSubnet01
          - !Ref PrivateSubnet02
          - !Ref PublicSubnet01
          - !Ref PublicSubnet02

  ################################### EKS Node Group #######################################################

  NodeInstanceProfile:
    DependsOn:
      - Cluster
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: "/"
      Roles:
        - !Ref NodeInstanceRole

  NodeInstanceRole:
    DependsOn:
      - Cluster
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Join ["-", [ !Ref ApplicationName, "eks-nodegroup-role" ] ]
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: "/"
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonEKSWorkerNodePolicy
        - arn:aws:iam::aws:policy/AmazonEKS_CNI_Policy
        - arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly

  NodeSecurityGroup:
    DependsOn:
      - Cluster
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Join ["-", [ !Ref ApplicationName, "eks-nodegroup-sg" ] ]
      GroupDescription: Security group for all nodes in the cluster
      VpcId: !Ref VPC
      Tags:
        - Key: !Sub
            - "kubernetes.io/cluster/${Cluster}"
            - { Cluster: !Ref Cluster }
          Value: 'owned'

  NodeSecurityGroupIngress:
    Type: AWS::EC2::SecurityGroupIngress
    DependsOn:
      - Cluster
    Properties:
      Description: Allow node to communicate with each other
      GroupId: !Ref NodeSecurityGroup
      SourceSecurityGroupId: !Ref NodeSecurityGroup
      IpProtocol: '-1'
      FromPort: 0
      ToPort: 65535

  NodeSecurityGroupFromControlPlaneIngress:
    Type: AWS::EC2::SecurityGroupIngress
    DependsOn:
      - Cluster
    Properties:
      Description: Allow worker Kubelets and pods to receive communication from the cluster control plane
      GroupId: !Ref NodeSecurityGroup
      SourceSecurityGroupId: !GetAtt ControlPlaneSecurityGroup.GroupId
      IpProtocol: tcp
      FromPort: 1025
      ToPort: 65535

  NodeSecurityGroupIngressNginxFromAnywhere:
    Type: AWS::EC2::SecurityGroupIngress
    DependsOn:
      - Cluster
    Properties:
      Description: Allow anyone to get to LB
      GroupId: !Ref NodeSecurityGroup
      CidrIp: 0.0.0.0/0
      IpProtocol: tcp
      FromPort: 80
      ToPort: 80

  NodeSecurityGroupIngressZuulFromAnywhere:
    Type: AWS::EC2::SecurityGroupIngress
    DependsOn:
      - Cluster
    Properties:
      Description: Allow anyone to get to LB
      GroupId: !Ref NodeSecurityGroup
      CidrIp: 0.0.0.0/0
      IpProtocol: tcp
      FromPort: 8080
      ToPort: 8080

  NodeSecurityGroupIngressElasticSearchFromAnywhere:
    Type: AWS::EC2::SecurityGroupIngress
    DependsOn:
      - Cluster
    Properties:
      Description: Allow anyone to get to LB
      GroupId: !Ref NodeSecurityGroup
      CidrIp: 0.0.0.0/0
      IpProtocol: tcp
      FromPort: 9090
      ToPort: 9090

  ControlPlaneEgressToNodeSecurityGroup:
    Type: AWS::EC2::SecurityGroupEgress
    DependsOn:
      - Cluster
    Properties:
      Description: Allow the cluster control plane to communicate with worker Kubelet and pods
      GroupId: !GetAtt ControlPlaneSecurityGroup.GroupId
      #     DestinationSecurityGroupId: !Ref NodeSecurityGroup
      CidrIp: "0.0.0.0/0"
      IpProtocol: -1
      FromPort: 0
      ToPort: 65535

  ClusterControlPlaneSecurityGroupIngress:
    Type: AWS::EC2::SecurityGroupIngress
    DependsOn:
      - Cluster
    Properties:
      Description: Allow pods to communicate with the cluster API Server
      GroupId: !GetAtt ControlPlaneSecurityGroup.GroupId
      SourceSecurityGroupId: !Ref NodeSecurityGroup
      IpProtocol: tcp
      ToPort: 443
      FromPort: 443

  DBSecurityGroupNodeGroupIngress:
    Type: AWS::RDS::DBSecurityGroupIngress
    DependsOn:
      - Cluster
    Properties:
      DBSecurityGroupName: !Ref DBSecurityGroup
      EC2SecurityGroupId: !GetAtt NodeSecurityGroup.GroupId

  TargetGroupnZuul:
    DependsOn:
      - Cluster

    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: !Join ["-", [ !Ref ApplicationName, "tg-zuul" ] ]
      VpcId: !Ref VPC
      TargetType: instance
      Port: 30086
      Protocol: HTTP
      HealthCheckEnabled: true
      HealthCheckIntervalSeconds: 30
      HealthCheckPath: /actuator/health
      HealthCheckPort: 30086
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 4
      UnhealthyThresholdCount: 2

  TargetGroupNginx:
    DependsOn:
      - Cluster

    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: !Join ["-", [ !Ref ApplicationName, "tg-nginx" ] ]
      VpcId: !Ref VPC
      TargetType: instance
      Port: 30087
      Protocol: HTTP
      HealthCheckEnabled: true
      HealthCheckIntervalSeconds: 30
      HealthCheckPath: /actuator/health
      HealthCheckPort: 30086
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 4
      UnhealthyThresholdCount: 2

  TargetGroupElasticsearch:
    DependsOn:
      - Cluster

    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: !Join ["-", [ !Ref ApplicationName, "tg-elasticsearch" ] ]
      VpcId: !Ref VPC
      TargetType: instance
      Port: 30920
      Protocol: HTTP
      HealthCheckEnabled: true
      HealthCheckIntervalSeconds: 30
      HealthCheckPath: /actuator/health
      HealthCheckPort: 30086
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 4
      UnhealthyThresholdCount: 2

  NodeGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    DependsOn:
      - Cluster
    Properties:
      DesiredCapacity: !Ref NodeAutoScalingGroupMaxSize
      LaunchConfigurationName: !Ref NodeLaunchConfig
      MinSize: !Ref NodeAutoScalingGroupMinSize
      MaxSize: !Ref NodeAutoScalingGroupMaxSize
      VPCZoneIdentifier:
        - !Ref PublicSubnet01
        - !Ref PublicSubnet02
      Tags:
        - Key: Name
          Value: !Sub
            - "${Cluster}-${NodeGroupName}-Node"
            - { Cluster: !Ref Cluster }
          PropagateAtLaunch: 'true'
        - Key: !Sub
            - 'kubernetes.io/cluster/${Cluster}'
            - { Cluster: !Ref Cluster }
          Value: 'owned'
          PropagateAtLaunch: 'true'
      TargetGroupARNs:
        - !Ref TargetGroupNginx
        - !Ref TargetGroupElasticsearch
        - !Ref TargetGroupnZuul
    UpdatePolicy:
      AutoScalingRollingUpdate:
        MinInstancesInService: '1'
        MaxBatchSize: '1'

  NodeLaunchConfig:
    DependsOn:
      - Cluster
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      AssociatePublicIpAddress: 'true'
      IamInstanceProfile: !Ref NodeInstanceProfile
      ImageId: !FindInMap [RegionMap, !Ref "AWS::Region", EKSAMIID]
      InstanceType: !Ref NodeInstanceType
      SecurityGroups:
        - !Ref NodeSecurityGroup
      UserData: !Base64
        "Fn::Sub": |
          #!/bin/bash
          mkdir -p /tmp/d/dscmv9/elasticsearch-7.7.1/data
          chmod 777 /tmp/d/dscmv9/elasticsearch-7.7.1/data
          mkdir -p /tmp/d/casepedia/data
          chmod 777 /tmp/d/casepedia/data
          set -o xtrace
          /etc/eks/bootstrap.sh ${Cluster}
          /opt/aws/bin/cfn-signal --exit-code $? \
                   --stack  ${AWS::StackName} \
                   --resource NodeGroup  \
                   --region ${AWS::Region}

  ################################# Operation server ####################################################

  EC2S3AccessRoleInstanceProfile:
    DependsOn:
      - NodeGroup
      - NodeLaunchConfig
    Type: "AWS::IAM::InstanceProfile"
    Properties:
      Path: "/"
      Roles:
        - "VentureAdminRole"
  Ec2Instance:
    DependsOn:
      - NodeGroup
      - NodeLaunchConfig
    Type: AWS::EC2::Instance
    Metadata:
      AWS::CloudFormation::Init:
        configSets:
          operation:
            - "cfnhup"
            - "enableLogging"
            - "postgres"
            - "getBuildId"
            - "kubectl"
            - "installGit"
            - "createPgEndpoint"
            - "applyPgEndpoint"
            - "applyPgSvc"

          changeSet:
            - "getBuildId"
            - "updatePgEndpoint"
        cfnhup:
          files:
            /etc/cfn/cfn-hup.conf:
              content: !Sub |
                [main]
                stack=${AWS::StackName}
                region=${AWS::Region}
                interval=1
              mode: "000400"
              owner: "root"
              group: "root"

            /etc/cfn/hooks.d/cfn-auto-reloader.conf:
              content: !Sub |
                [cfn-auto-reloader-hook]
                triggers=post.update
                path=Resources.Ec2Instance.Metadata.AWS::CloudFormation::Init
                action=/opt/aws/bin/cfn-init -v --stack ${AWS::StackName} --resource Ec2Instance --configsets changeSet --region ${AWS::Region}
                runas=root
              mode: "000400"
              owner: "root"
              group: "root"

          services:
            sysvinit:
              cfn-hup:
                enabled: "true"
                ensureRunning: "true"
                files:
                  - "/etc/cfn/cfn-hup.conf"
                  - "/etc/cfn/hooks.d/cfn-auto-reloader.conf"

        enableLogging:
          packages:
            yum:
              awslogs: []
          files:
            /etc/awslogs/awscli.conf:
              content: !Sub |
                [plugins]
                cwlogs = cwlogs
                [default]
                region = ${AWS::Region}
            /etc/awslogs/awslogs.conf:
              content: !Sub |
                [general]
                state_file = /var/lib/awslogs/agent-state
                use_gzip_http_content_encoding = false
                [/var/log/cfn-init.log]
                datetime_format = %b %d %H:%M:%S
                file = /var/log/cfn-init.log
                buffer_duration = 5000
                log_stream_name = postgres
                initial_position = start_of_file
                log_group_name = /aws/eks/base
                region = ${AWS::Region}
          services:
            sysvinit:
              awslogsd:
                enabled: "true"
                ensureRunning: "true"
                files:
                  - "/etc/awslogs/awslogs.conf"
                  - "/etc/aws/logs/awscli.conf"

        getBuildId:
          commands:
            printId:
              command: !Sub "echo ${BuildId}"

        postgres:
          files:
            /etc/yum.repos.d/pgdg.repo:
              content:  |
                [pgdg12]
                name=PostgreSQL 12 for RHEL/CentOS 7 - x86_64
                baseurl=https://download.postgresql.org/pub/repos/yum/12/redhat/rhel-7-x86_64
                enabled=1
                gpgcheck=0
              mode: "000644"
              owner: "root"
              group: "root"
            /tmp/restore.sh:
              content: !Sub |
                aws s3 cp s3://bloom-${AWS::AccountId}-bucket/dsconfig.sql /tmp/dsconfig.sql
                aws s3 cp s3://bloom-${AWS::AccountId}-bucket/flowable.sql /tmp/flowable.sql
                aws s3 cp s3://bloom-${AWS::AccountId}-bucket/ecmdb.sql /tmp/ecmdb.sql
                PGPASSWORD=password psql --host ${DBInstance.Endpoint.Address} --port ${DBInstance.Endpoint.Port} --username postgres  --dbname candela -c 'create database dsconfig;'
                PGPASSWORD=password psql --host ${DBInstance.Endpoint.Address} --port ${DBInstance.Endpoint.Port} --username postgres  --dbname candela -c 'create database flowable;'
                PGPASSWORD=password psql --host ${DBInstance.Endpoint.Address} --port ${DBInstance.Endpoint.Port} --username postgres  --dbname candela -c 'create database ecmdb;'
                PGPASSWORD=password psql -f /tmp/dsconfig.sql --host ${DBInstance.Endpoint.Address} --port ${DBInstance.Endpoint.Port} --username postgres  --dbname dsconfig
                PGPASSWORD=password psql -f /tmp/flowable.sql --host ${DBInstance.Endpoint.Address} --port ${DBInstance.Endpoint.Port} --username postgres  --dbname flowable
                PGPASSWORD=password psql -f /tmp/ecmdb.sql --host ${DBInstance.Endpoint.Address} --port ${DBInstance.Endpoint.Port} --username postgres  --dbname ecmdb


          commands:
            a-install:
              command: "sudo yum -y install postgresql12 postgresql12-server"
            b-startdb:
              command: "sudo /usr/pgsql-12/bin/postgresql-12-setup initdb"
            c-enableService:
              command: "systemctl enable postgresql-12 --now"
            d-restore:
              command: "bash /tmp/restore.sh"
              ignoreErrors: true

        kubectl:
          files:
            /tmp/initcluster.sh:
              content:  !Sub |
                sudo curl -o /opt/kubectl https://amazon-eks.s3.us-west-2.amazonaws.com/1.17.7/2020-07-08/bin/linux/amd64/kubectl
                sudo chmod +x /opt/kubectl
                sudo mv /opt/kubectl /usr/bin
                aws eks --region ${AWS::Region} update-kubeconfig --name ${Cluster}
                sudo curl -o /tmp/aws-auth-cm.yaml https://amazon-eks.s3.us-west-2.amazonaws.com/cloudformation/2020-07-23/aws-auth-cm.yaml
                sudo sed -i 's,<ARN of instance role (not instance profile)>,${NodeInstanceRole.Arn},g' /tmp/aws-auth-cm.yaml
                sudo kubectl apply -f /tmp/aws-auth-cm.yaml
              mode: "000777"
              owner: "root"
              group: "root"
          commands:
            a-initcluster:
              command: "bash /tmp/initcluster.sh"

        installGit:
          packages:
            yum:
              git: []
              bind-utils: []
          commands:
            a-initDir:
              command: "sudo mkdir /base-deployments"
            d-getFromGit:
              command: !Sub "sudo git clone -b ${Branch} https://${GitHubUser}:${OAuthToken}@github.com/${Owner}/${Repo}.git"
              cwd: "/base-deployments"

        createPgEndpoint:
          commands:
            a-updatePGendpoint:
              command: !Sub "sed -i s/'<IP From RDS>'/$(dig ${DBInstance.Endpoint.Address}  +short | tail -1)/g ${Repo}/${PostgresEndpointDeploymentUrl}"
              cwd: "/base-deployments"

        applyPgEndpoint:
          commands:
            a-applyPgEp:
              command: !Sub "sudo kubectl apply -f ${Repo}/${PostgresEndpointDeploymentUrl}"
              cwd: "/base-deployments"

        applyPgSvc:
          commands:
            a-applyPgEp:
              command: !Sub "sudo kubectl apply -f ${Repo}/${PostgresServiceDeploymentUrl}"
              cwd: "/base-deployments"
            b-shutDown:
              command: "sudo shutdown -h now"


        updatePgEndpoint:
          commands:
            a-cleanUp:
              command: !Sub "rm -rf ${Repo}"
              cwd: "/base-deployments"
            b-CloneLatest:
              command: !Sub "sudo git clone -b ${Branch} https://${GitHubUser}:${OAuthToken}@github.com/${Owner}/${Repo}.git"
              cwd: "/base-deployments"
            c-replace:
              command: !Sub "sed -i s/'<IP From RDS>'/$(dig ${DBInstance.Endpoint.Address}  +short | tail -1)/g ${Repo}/${PostgresEndpointDeploymentUrl}"
              cwd: "/base-deployments"
            e-upgradeDeployment:
              command: !Sub "sudo kubectl apply -f ${Repo}/${PostgresEndpointDeploymentUrl}"
              cwd: "/base-deployments"
            f-upgradeSvc:
              command: !Sub "sudo kubectl apply -f ${Repo}/${PostgresServiceDeploymentUrl}"
              cwd: "/base-deployments"
            g-shutDown:
              command: "sudo shutdown -h now"


    Properties:
      ImageId: !FindInMap [RegionMap, !Ref "AWS::Region", AMZNLNX2AMIID]  # Amazon Linux 2 ami
      SecurityGroupIds:
        - !GetAtt  "ControlPlaneSecurityGroup.GroupId"
      SubnetId: !Ref PrivateSubnet01
      IamInstanceProfile: !Ref EC2S3AccessRoleInstanceProfile
      Tags:
        - Key: Name
          Value: !Join ["-", [ !Ref ApplicationName, "base-ops-server" ] ]
      UserData: !Base64
        'Fn::Join':
          - ''
          - - |
              #!/bin/bash -x
            - |
              # Install the files and packages from the metadata
            - '/opt/aws/bin/cfn-init -v '
            - '-c operation'
            - '         --stack '
            - !Ref 'AWS::StackName'
            - '         --resource Ec2Instance '
            - '         --region '
            - !Ref 'AWS::Region'
            - |+

            - |
              # Signal the status from cfn-init
            - '/opt/aws/bin/cfn-signal -e $? '
            - '         --stack '
            - !Ref 'AWS::StackName'
            - '         --resource Ec2Instance '
            - '         --region '
            - !Ref 'AWS::Region'
            - |+

  ###############################  bastion for testing purposes only #################
  BaseBastionInstance:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: !FindInMap [RegionMap, !Ref "AWS::Region", AMZNLNX2AMIID]  # Amazon Linux 2 ami
      Tags:
        - Key: "Name"
          Value: !Join ["-", [ !Ref ApplicationName, "base-bastion-server" ] ]
      SecurityGroupIds:
        - !GetAtt  "ControlPlaneSecurityGroup.GroupId"
      IamInstanceProfile: !Ref EC2S3AccessRoleInstanceProfile
      UserData: !Base64
        "Fn::Sub": |
          #!/bin/bash
          echo "ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAACAQCzA6ZB6IaTRDD1ezWs55TjQEyyRC6hJEE/2/JszcUiSDxlT1BuTK7CfkA+G6Fr8aIOw8Nidm27mFnH9ieWZldb2lewatLFz1uMySobz8ir3lLYKGeezbZ534jRGa8Lqjw4d5GC4e2x+c7K6junysYmevIPJGOQTy6dNjPZd1jSFsMfXkAMmbXLCtGAb3XF+hiuc9LyhxFVCJxxs6nwDbY//kEgoEMx1GI4iWjrUtyblwr7VV93gfK59esamw6br2CyR6gZtqZ89HWs9E8PvnQhLrDQb3Ae4rFW7EqwmP/lsM6Aw4ytbNZPXPayUBuQRX+aeJebQScLPFQnvab1Yel+hWhuwF7geNw+5RRA5EB6RxzVtpYDQQTc1KTxqajlK0ZMDUXAwxq34WNkPB27ZR6yuNN3MKG9AFjPRrlew5Et+LGsoGGTjOUP1AzB0etkGf7OxwmJqK6sgW/humF1tvUGdWpa37QQuSiKhVnf1RDlLkm1dV6txxb1Nx/WVR+HpBnGOz90j2PstiPuiVQyMysptGB6FnY4SGUsByBCcZurkSo0I3NqrU5tQM8UvPrb2M3C0GOyCMJ7sdyT5QpAAAtC5v0gWAJr/MBR2wTakISPa/Ve1/xRy/AFxHIgIYEbqCEQ+DJ/X6RUn7tZGtJD8TQ9NRiJKsWS71hGdA78zaGchQ== vibhorjain@Vibhor-Jain.domain.name" >> /home/ec2-user/.ssh/authorized_keys
          sudo curl -o /opt/kubectl https://amazon-eks.s3.us-west-2.amazonaws.com/1.17.7/2020-07-08/bin/linux/amd64/kubectl
          sudo chmod +x /opt/kubectl
          sudo mv /opt/kubectl /usr/bin
          aws eks --region ${AWS::Region} update-kubeconfig --name ${Cluster}
      SubnetId: !Ref PublicSubnet01


  ######################################### Load Balancer Configs ######################################
  ListenerRuleZuul:
    DependsOn:
      - Ec2Instance
      - BaseBastionInstance
    Type: 'AWS::ElasticLoadBalancingV2::ListenerRule'
    Properties:
      Actions:
        - Type: forward
          TargetGroupArn: !Ref TargetGroupnZuul
      Conditions:
        - Field: http-request-method
          HttpRequestMethodConfig:
            Values:
              - GET_OR_POST
      ListenerArn: !Ref ListenerZuul
      Priority: 1

  ListenerZuul:
    DependsOn:
      - Ec2Instance
      - BaseBastionInstance
    Type: 'AWS::ElasticLoadBalancingV2::Listener'
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref TargetGroupnZuul
      LoadBalancerArn: !Ref LoadBalancer
      Port: '8080'
      Protocol: HTTP

  ListenerRuleNginx:
    DependsOn:
      - Ec2Instance
      - BaseBastionInstance
    Type: 'AWS::ElasticLoadBalancingV2::ListenerRule'
    Properties:
      Actions:
        - Type: forward
          TargetGroupArn: !Ref TargetGroupNginx
      Conditions:
        - Field: http-request-method
          HttpRequestMethodConfig:
            Values:
              - GET_OR_POST
      ListenerArn: !Ref ListenerNginx
      Priority: 1

  ListenerNginx:
    DependsOn:
      - Ec2Instance
      - BaseBastionInstance
    Type: 'AWS::ElasticLoadBalancingV2::Listener'
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref TargetGroupNginx
      LoadBalancerArn: !Ref LoadBalancer
      Port: '80'
      Protocol: HTTP

  ListenerRuleElasticSearch:
    DependsOn:
      - Ec2Instance
      - BaseBastionInstance
    Type: 'AWS::ElasticLoadBalancingV2::ListenerRule'
    Properties:
      Actions:
        - Type: forward
          TargetGroupArn: !Ref TargetGroupElasticsearch
      Conditions:
        - Field: http-request-method
          HttpRequestMethodConfig:
            Values:
              - GET_OR_POST
      ListenerArn: !Ref ListenerElasticSearch
      Priority: 1

  ListenerElasticSearch:
    DependsOn:
      - Ec2Instance
      - BaseBastionInstance
    Type: 'AWS::ElasticLoadBalancingV2::Listener'
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref TargetGroupElasticsearch
      LoadBalancerArn: !Ref LoadBalancer
      Port: '9090'
      Protocol: HTTP

  LoadBalancer:
    DependsOn:
      - Ec2Instance
      - BaseBastionInstance
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: !Join ["-", [ !Ref ApplicationName, "eks-lb" ] ]
      Subnets:
        - !Ref PublicSubnet01
        - !Ref PublicSubnet02
      SecurityGroups:
        - !Ref NodeSecurityGroup

  #################################  api gateway + waf setup #################################
  CandelaApi:
    DependsOn:
      - ListenerRuleElasticSearch
      - ListenerRuleNginx
      - ListenerRuleZuul
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: !Join ["-", [ !Ref ApplicationName, "api" ] ]
      Description: API used for different requests
      FailOnWarnings: true
  ApiGatewayCloudWatchLogsRole:
    DependsOn:
      - ListenerRuleElasticSearch
      - ListenerRuleNginx
      - ListenerRuleZuul
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - apigateway.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
        - PolicyName: ApiGatewayLogsPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:DescribeLogGroups
                  - logs:DescribeLogStreams
                  - logs:PutLogEvents
                  - logs:GetLogEvents
                  - logs:FilterLogEvents
                Resource: "*"
  ApiGatewayAccount:
    Type: AWS::ApiGateway::Account
    DependsOn:
      - ListenerRuleElasticSearch
      - ListenerRuleNginx
      - ListenerRuleZuul
    Properties:
      CloudWatchRoleArn:
        !GetAtt
        - ApiGatewayCloudWatchLogsRole
        - Arn
  CandelaApiGatewayResource:
    Type: AWS::ApiGateway::Resource
    DependsOn:
      - ListenerRuleElasticSearch
      - ListenerRuleNginx
      - ListenerRuleZuul
    Properties:
      RestApiId: !Ref CandelaApi
      ParentId: !GetAtt CandelaApi.RootResourceId
      PathPart: !Join ["", ["{", !Ref ProxyPath, "+}"]]
  CandelaRequest:
    Type: AWS::ApiGateway::Method
    DependsOn:
      - ListenerRuleElasticSearch
      - ListenerRuleNginx
      - ListenerRuleZuul
    Properties:
      ApiKeyRequired: true
      AuthorizationType: NONE
      HttpMethod: ANY
      ResourceId: !Ref CandelaApiGatewayResource
      RestApiId: !Ref CandelaApi
      RequestParameters:
        method.request.path.proxy: true
      MethodResponses:
        - StatusCode: "200"
      Integration:
        RequestParameters:
          integration.request.path.proxy: 'method.request.path.proxy'
        IntegrationHttpMethod: ANY
        Type: HTTP_PROXY
        Uri:
          !Join
          - ''
          - - !Sub
              - "http://${LoadBalancerDNSName}/"
              - LoadBalancerDNSName: !GetAtt LoadBalancer.DNSName
            - !Join ["", ["{", !Ref ProxyPath, "}"]]
        IntegrationResponses:
          - StatusCode: "200"
  CandelaApiStage:
    DependsOn:
      - ListenerRuleElasticSearch
      - ListenerRuleNginx
      - ListenerRuleZuul
      - ApiGatewayAccount
    Type: AWS::ApiGateway::Stage
    Properties:
      StageName: !Ref DeploymentName
      Description: !Join [" ", [ !Ref DeploymentName, "Stage" ] ]
      RestApiId: !Ref CandelaApi
      DeploymentId: !Ref ApiDeployment
      MethodSettings:
        - DataTraceEnabled: true
          HttpMethod: "*"
          LoggingLevel: INFO
          ResourcePath: "/*"
  ApiDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn:
      - ListenerRuleElasticSearch
      - ListenerRuleNginx
      - ListenerRuleZuul
      - CandelaRequest
      - CandelaApiGatewayResource
    Properties:
      RestApiId: !Ref CandelaApi

  CandelaApiKey:
    Type: AWS::ApiGateway::ApiKey
    Properties:
      Enabled: true
      Name: !Join ["-", [ !Ref ApplicationName, "api-key" ] ]
      Value: !Ref ApiKeyValue
      StageKeys:
        - RestApiId: !Ref CandelaApi
          StageName: !Ref CandelaApiStage
  CandelaApiUsagePlan:
    Type: AWS::ApiGateway::UsagePlan
    Properties:
      UsagePlanName: !Join ["-", [ !Ref ApplicationName, "api-key" ] ]
      ApiStages:
        - ApiId: !Ref CandelaApi
          Stage: !Ref CandelaApiStage
  CandelaApiUsagePlanKey:
    Type: AWS::ApiGateway::UsagePlanKey
    Properties:
      KeyId: !Ref CandelaApiKey
      KeyType: API_KEY
      UsagePlanId: !Ref CandelaApiUsagePlan

  CandelaGeoConstraints:
    Type: "AWS::WAFRegional::GeoMatchSet"
    Properties:
      Name: "GeoMatchSet for restricted countries"
      GeoMatchConstraints:
        - Type: "Country"
          Value: "IN"
        - Type: "Country"
          Value: "SG"
  CandelaWAFRule:
    Type: "AWS::WAFRegional::Rule"
    Properties:
      Name: !Join ["", [ !Ref ApplicationName, "WAFRule" ] ]
      MetricName: !Join ["", [ !Ref ApplicationName, "WAFRule" ] ]
      Predicates:
        - DataId: !Ref CandelaGeoConstraints
          Negated: false
          Type: "GeoMatch"
  CandelaWAFWebAcl:
    Type: "AWS::WAFRegional::WebACL"
    Properties:
      Name: !Join ["", [ !Ref ApplicationName, "WAFACL" ] ]
      DefaultAction:
        Type: "BLOCK"
      MetricName: !Join ["", [ !Ref ApplicationName, "WAFACL" ] ]
      Rules:
        - Action:
            Type: "ALLOW"
          Priority: 0
          RuleId: !Ref CandelaWAFRule
  CandelaWAFWebAclAssociation:
    Type: AWS::WAFRegional::WebACLAssociation
    DependsOn:
      - ListenerRuleElasticSearch
      - ListenerRuleNginx
      - ListenerRuleZuul
      - CandelaRequest
      - CandelaApiGatewayResource
      - ApiDeployment
      - ApiGatewayAccount
      - ApiGatewayCloudWatchLogsRole
    Properties:
      ResourceArn: !Sub "arn:aws:apigateway:${AWS::Region}::/restapis/${CandelaApi}/stages/${DeploymentName}"
      WebACLId: !Ref CandelaWAFWebAcl

  ########################################### Lambda and cloudwatch event to update stack ###########################

  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: '/'
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonEC2FullAccess
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - arn:aws:iam::aws:policy/service-role/AWSLambdaRole

  UpdateStackFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub "${AWS::StackName}-update-stack"
      Description: Start the base ops server on update stack event to initiate cfn hup service
      Handler: index.lambda_handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Code:
        ZipFile: !Sub |
          import boto3
          region = '${AWS::Region}'
          ec2 = boto3.client('ec2', region_name=region)
          instances=['${Ec2Instance}']
          def lambda_handler(event, context):
              if event['detail']['requestParameters']['stackName'] == '${AWS::StackName}':
                  ec2.start_instances(InstanceIds=instances)
                  print('started your instance: ' + str(instances))
      Runtime: python3.6
      Timeout: 10
      VpcConfig:
        SecurityGroupIds:
          - !GetAtt  "ControlPlaneSecurityGroup.GroupId"
        SubnetIds:
          - !Ref PrivateSubnet01
          - !Ref PrivateSubnet02

  CloudWatchEventRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - !Sub lambda.amazonaws.com
                - !Sub events.amazonaws.com
            Action: "sts:AssumeRole"
      Path: "/"
      Policies:
        - PolicyName: CloudWatchEventPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - "lambda:InvokeFunction"
                Resource: "*"

  StackUpdateRule:
    Type: AWS::Events::Rule
    Properties:
      Name: !Sub "${AWS::StackName}-update-rule"
      Description: "Rule to trigger lambda function to start the instances"
      EventPattern: |
        {
          "source": [
            "aws.cloudformation"
          ],
          "detail-type": [
            "AWS API Call via CloudTrail"
          ],
          "detail": {
            "eventSource": [
              "cloudformation.amazonaws.com"
            ],
            "eventName": [
              "UpdateStack"
            ]
          }
        }
      State: "ENABLED"
      Targets:
        - Arn:
            Fn::GetAtt:
              - "UpdateStackFunction"
              - "Arn"
          Id: "LambdaTarget"



  EventMappingToLambda:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref UpdateStackFunction
      Principal: events.amazonaws.com
      SourceAccount: !Ref 'AWS::AccountId'
      SourceArn: !GetAtt StackUpdateRule.Arn




  #############################################################################################################

Outputs:
  VPCId:
    Description: VPC ID
    Value:
      Ref: VPC
    Export:
      Name:
        Fn::Sub: "${AWS::StackName}-VPCID"

  SubnetIds:
    Description: The subnet ID to use for eks
    Value: !Join [ ",", [ !Ref PublicSubnet01, !Ref PublicSubnet02, !Ref PrivateSubnet01, !Ref PrivateSubnet02 ] ]
    Export:
      Name:
        Fn::Sub: "${AWS::StackName}-Subnets"

  PublicSubnetId01:
    Description: The public subnet ID to use eks
    Value: !Ref PublicSubnet01
    Export:
      Name:
        Fn::Sub: "${AWS::StackName}-Public-Subnet-01"

  PublicSubnetId02:
    Description: The public subnet ID to use eks
    Value: !Ref PublicSubnet02
    Export:
      Name:
        Fn::Sub: "${AWS::StackName}-Public-Subnet-02"

  PrivateSubnetId01:
    Description: Private Subnets for eks
    Value: !Ref PrivateSubnet01
    Export:
      Name:
        Fn::Sub: "${AWS::StackName}-Private-Subnet-01"

  PrivateSubnetId02:
    Description: Private Subnets for eks
    Value: !Ref PrivateSubnet02
    Export:
      Name:
        Fn::Sub: "${AWS::StackName}-Private-Subnet-02"

  ControlPlaneSecurityGroupId:
    Description: Security group for the cluster control plane communication with worker nodes
    Value:
      Fn::GetAtt: [ "ControlPlaneSecurityGroup", "GroupId" ]
    Export:
      Name:
        Fn::Sub: "${AWS::StackName}-ControlPlaneSecurityGroupId"

  Cluster:
    Description: EKS Cluster Name
    Value: !Ref Cluster
    Export:
      Name:
        Fn::Sub: "${AWS::StackName}-Cluster"

  LoadBalancerDNSName:
    Description: DNS name for Load Balancer
    Value: !Sub "${LoadBalancer.DNSName}"

  LambdaExecutionRoleArn:
    Value: !GetAtt LambdaExecutionRole.Arn
    Export:
      Name:
        Fn::Sub: "${AWS::StackName}-LambdaExecutionRoleArn"
  AdminIamInstanceProfile:
    Description: IAM instance profile for all ops servers
    Value: !Ref EC2S3AccessRoleInstanceProfile
    Export:
      Name:
        Fn::Sub: "${AWS::StackName}-AdminIamInstanceProfile"
  apiGatewayInvokeURL:
    Description: Invoke URL
    Value: !Sub "https://${CandelaApi}.execute-api.${AWS::Region}.amazonaws.com/${CandelaApiStage}"
  apiGatewayInvokeURLExample:
    Description: Invoke URL Example
    Value: !Sub "https://${CandelaApi}.execute-api.${AWS::Region}.amazonaws.com/${CandelaApiStage}/actuator/health"
  RDSEndpoint:
    Value: !GetAtt DBInstance.Endpoint.Address
